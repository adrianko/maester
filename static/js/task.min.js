// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($) {
    var component_stash, edit_item, task_category, task_open, task_order;
    component_stash = {};
    task_category = "";
    task_order = [];
    task_open = "";
    edit_item = "";
    window.taskSortable = function() {
      $(".task-list").sortable({
        connectWith: $(".task-list"),
        placeholder: "placeholder",
        change: function() {
          var id;
          id = $(this).closest(".panel").attr("data-category");
          if (__indexOf.call(task_order, id) < 0) {
            return task_order.push(id);
          }
        },
        stop: function(e, ui) {
          var order, t, x, _i, _len;
          order = {};
          for (_i = 0, _len = task_order.length; _i < _len; _i++) {
            x = task_order[_i];
            order[x] = (function() {
              var _j, _len1, _ref, _results;
              _ref = $("div.panel[data-category='" + x + "']").find(".task");
              _results = [];
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                t = _ref[_j];
                _results.push($(t).attr("data-task"));
              }
              return _results;
            })();
          }
          return $.ajax({
            type: "POST",
            url: "/api/set/task/order",
            data: {
              order: JSON.stringify(order)
            },
            success: function(data) {
              if (data.code !== 200) {
                return console.log("ERROR: " + data.code);
              }
            },
            error: function(jqXHR, textStatus, err) {
              return console.log(err);
            }
          });
        }
      }).disableSelection();
      return null;
    };
    window.taskSortable();
    $(document.body).on("click", "a.new-task", function() {
      $("#new-task-modal-title").val("");
      $("#new-task-modal-desc").val("");
      $("#new-task-modal-duration").val("0");
      $("#new-task-modal-duration-unit").val("0");
      $("#new-task-modal-users .selectable-user").removeClass("selected");
      task_category = $(this).attr("data-category");
      return void 0;
    });
    $(document.body).on("click", "#new-task-modal-submit", function() {
      var component, s;
      component = 0;
      if (!("task" in component_stash)) {
        component = 1;
      }
      $.ajax({
        type: "POST",
        url: "/api/set/task/new",
        data: {
          component: component,
          data: {
            title: $("#new-task-modal-title").val(),
            category: task_category,
            order: $(".panel[data-category='" + task_category + "'] .panel-body .well").length + 1,
            desc: $("#new-task-modal-desc").val(),
            duration: $("#new-task-modal-duration").val(),
            duration_unit: $("#new-task-modal-duration-unit").val(),
            users: JSON.stringify((function() {
              var _i, _len, _ref, _results;
              _ref = $("#new-task-modal-users div.selected");
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                s = _ref[_i];
                _results.push($(s).attr("data-user"));
              }
              return _results;
            })())
          }
        },
        success: function(data) {
          var task;
          if (component === 1) {
            component_stash.task = data.data.components;
          }
          task = component_stash.task;
          task = task.replace("{{ title }}", $("#new-task-modal-title").val());
          task = task.replace("{{ id }}", data.data.id);
          $("div.panel[data-category='" + task_category + "'] .panel-body .task-list").append(task);
          return $("#new-task-modal").modal("hide");
        },
        error: function(jqXHR, textStatus, err) {
          return console.log(err);
        }
      });
      return void 0;
    });
    $(document.body).on("click", ".task-remove", function() {
      $("#task-details-modal").modal("hide");
      return $("#delete-task-modal").modal("show");
    });
    $(document.body).on("click", "#delete-task-yes", function() {
      $(".task[data-task='" + task_open + "']").parent().remove();
      $.ajax({
        type: "POST",
        url: "/api/set/task/delete",
        data: {
          id: task_open
        },
        success: function(data) {
          if (data.code !== 200) {
            console.log("ERROR: " + data.code);
          }
          return $("#delete-task-modal").modal("hide");
        },
        error: function(jqXHR, textStatus, err) {
          return console.log(err);
        }
      });
      return void 0;
    });
    $(document.body).on("click", "#delete-task-no", function() {
      $("#delete-task-modal").modal("hide");
      $("#task-details-modal").modal("show");
      return void 0;
    });
    $(document.body).on("click", ".task", function() {
      task_open = $(this).attr("data-task");
      $.ajax({
        type: "GET",
        url: "/api/get/task/" + task_open,
        success: function(data) {
          var duration, duration_unit, u, _i, _len, _ref;
          if (data.code !== 200) {
            return console.log("ERROR: " + data.code);
          } else {
            data = data.data[0];
            $("#task-title").text(data.title);
            $("#task-description").text(data.description);
            duration = data.duration;
            duration_unit = "";
            if (duration < 1800) {
              duration = "";
            } else if (duration >= 1800 && duration < 86400) {
              duration = duration / 3600;
              duration_unit = "hr";
            } else if (duration >= 86400 && duration < 604800) {
              duration = duration / 86400;
              duration_unit = "dy";
            } else if (duration >= 604800 && duration < 2419200) {
              duration = duration / 604800;
              duration_unit = "wk";
            } else {
              duration = duration / 2419200;
              duration_unit = "mo";
            }
            $("#task-duration span[data-subitem='duration']").text(duration);
            $("#task-duration span[data-subitem='duration-unit']").text(duration_unit);
            $("#task-assignee ul.users").text("");
            _ref = data.users;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              u = _ref[_i];
              $("#task-assignee ul.users").append("<li>" + u.username + "</li>");
            }
            return $("#task-details-modal").modal("show");
          }
        }
      });
      return void 0;
    });
    $(".task-detail-container").hover(function() {
      return $(this).children(".edit-item").css("display", "inline-block");
    }, function() {
      return $(this).children(".edit-item").css("display", "none");
    });
    $(document.body).on("click", ".edit-item", function(e) {
      return void 0;
    });
    return $(document.body).on("click", ".selectable-user", function() {
      $(this).toggleClass("selected");
      return void 0;
    });
  })(jQuery);

}).call(this);
