// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($) {
    var component_stash, del_category, home_board, modal, taskSortable, task_list_changed, task_open;
    component_stash = {};
    modal = "";
    task_list_changed = [];
    task_open = "";
    home_board = "";
    del_category = "";
    taskSortable = function() {
      $(".task-list").sortable({
        connectWith: $(".task-list"),
        placeholder: "placeholder",
        change: function() {
          var id;
          id = $(this).closest(".panel").attr("data-category");
          if (__indexOf.call(task_list_changed, id) < 0) {
            return task_list_changed.push(id);
          }
        },
        stop: function(e, ui) {
          var order, t, x, _i, _len;
          order = {};
          for (_i = 0, _len = task_list_changed.length; _i < _len; _i++) {
            x = task_list_changed[_i];
            order[x] = (function() {
              var _j, _len1, _ref, _results;
              _ref = $("div.panel[data-category='" + x + "']").find(".task");
              _results = [];
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                t = _ref[_j];
                _results.push($(t).attr("data-id"));
              }
              return _results;
            })();
          }
          return $.ajax({
            type: "POST",
            url: "/api/set/task/order",
            data: {
              order: JSON.stringify(order)
            },
            success: function(data) {
              if (data.code !== 200) {
                return console.log("ERROR: " + data.code);
              }
            },
            error: function(jqXHR, textStatus, err) {
              return console.log(err);
            }
          });
        }
      }).disableSelection();
      return null;
    };
    taskSortable();
    $(document.body).on("click", "a.new-task", function() {
      $("#new-task-modal-title").val("");
      $("#new-task-modal-desc").val("");
      $("#new-task-modal-duration").val("0");
      $("#new-task-modal-duration-unit").val("0");
      $("#new-task-modal-user").val("0");
      modal = $(this).attr("data-category");
      return void 0;
    });
    $(document.body).on("click", "a.new-category", function() {
      $("#new-category-modal-title").val("");
      return void 0;
    });
    $(document.body).on("click", "a.new-board", function() {
      $("#new-board-modal-title").val("");
      return void 0;
    });
    $(document.body).on("click", "#new-task-modal-submit", function() {
      var component, s;
      component = 0;
      if (!("task" in component_stash)) {
        component = 1;
      }
      $.ajax({
        type: "POST",
        url: "/api/set/task/new",
        data: {
          component: component,
          data: {
            title: $("#new-task-modal-title").val(),
            category: modal,
            order: $(".panel[data-category='" + modal + "'] .panel-body .well").length + 1,
            desc: $("#new-task-modal-desc").val(),
            duration: $("#new-task-modal-duration").val(),
            duration_unit: $("#new-task-modal-duration-unit").val(),
            users: JSON.stringify((function() {
              var _i, _len, _ref, _results;
              _ref = $("#new-task-modal-users :selected");
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                s = _ref[_i];
                _results.push($(s).val());
              }
              return _results;
            })())
          }
        },
        success: function(data) {
          var task;
          if (component === 1) {
            component_stash.task = data.data.components;
          }
          task = component_stash.task;
          task = task.replace("{{ title }}", $("#new-task-modal-title").val());
          task = task.replace("{{ id }}", data.data.id);
          $("div.panel[data-category='" + modal + "'] .panel-body .task-list").append(task);
          return $("#new-task-modal").modal("hide");
        },
        error: function(jqXHR, textStatus, err) {
          return console.log(err);
        }
      });
      return void 0;
    });
    $(document.body).on("click", ".task-remove", function() {
      $("#task-details-modal").modal("hide");
      $(".task[data-id='" + task_open + "']").parent().remove();
      $.ajax({
        type: "POST",
        url: "/api/set/task/delete",
        data: {
          id: task_open
        },
        success: function(data) {
          if (data.code !== 200) {
            return console.log("ERROR: " + data.code);
          }
        },
        error: function(jqXHR, textStatus, err) {
          return console.log(err);
        }
      });
      return void 0;
    });
    $(document.body).on("click", ".task", function() {
      task_open = $(this).attr('data-id');
      $.ajax({
        type: "GET",
        url: "/api/get/task/" + task_open,
        success: function(data) {
          var duration, u, _i, _len, _ref;
          if (data.code !== 200) {
            return console.log("ERROR: " + data.code);
          } else {
            $("#task-title").text(data.data[0].title);
            $("#task-description").text(data.data[0].description);
            duration = data.data[0].duration;
            if (duration < 1800) {
              duration = "";
            } else if (duration >= 1800 && duration < 86400) {
              duration = (duration / 3600) + "hr";
            } else if (duration >= 86400 && duration < 604800) {
              duration = (duration / 86400) + "dy";
            } else if (duration >= 604800 && duration < 2419200) {
              duration = (duration / 604800) + "wk";
            } else {
              duration = (duration / 2419200) + "mo";
            }
            $("#task-duration").text(duration);
            $("#task-assignee ul.users").text("");
            _ref = data.data[0].users;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              u = _ref[_i];
              $("#task-assignee ul.users").append("<li>" + u.username + "</li>");
            }
            return $("#task-details-modal").modal("show");
          }
        }
      });
      return void 0;
    });
    $(document.body).on("click", "#new-category-modal-submit", function() {
      var component, title;
      component = 0;
      if (!("category" in component_stash)) {
        component = 1;
      }
      title = $("#new-category-modal-title").val();
      $.ajax({
        type: "POST",
        url: "/api/set/category/new",
        data: {
          component: component,
          id: $(".new-category:first").attr("data-board-id"),
          title: title
        },
        success: function(data) {
          var category;
          if (data.code !== 200) {
            console.log("ERROR: " + data.code);
          }
          if (component === 1) {
            component_stash.category = data.data.components;
          }
          category = component_stash.category;
          category = category.split("{{ c.id }}");
          category = category.join(data.data.id);
          category = category.replace("{{ c.title }}", title);
          $("div.categories").append(category);
          $("#new-category-modal").modal("hide");
          return taskSortable();
        },
        error: function(jqXHR, textStatus, err) {
          return console.log(err);
        }
      });
      return void 0;
    });
    $(document.body).on("click", "#new-board-modal-submit", function() {
      var component, title;
      component = 0;
      if (!("boarditem" in component_stash)) {
        component = 1;
      }
      title = $("#new-board-modal-title").val();
      $("#new-board-modal").modal("hide");
      $.ajax({
        type: "POST",
        url: "/api/set/board/new",
        data: {
          component: component,
          title: title
        },
        success: function(data) {
          var board;
          console.log(data);
          if (data.code !== 200) {
            console.log("ERROR: " + data.code);
          }
          if (component === 1) {
            component_stash.boarditem = data.data.components;
          }
          board = component_stash.boarditem;
          board = board.split("{{ id }}");
          board = board.join(data.data.id);
          board = board.replace("{{ title }}", title);
          $(".boards").eq(0).append(board);
          return $("#new-board-modal").modal("hide");
        },
        error: function(jqXHR, textStatus, err) {
          return console.log(err);
        }
      });
      return void 0;
    });
    $(document.body).on("click", ".board-link", function() {
      window.location.href = $(this).attr("data-href");
      return void 0;
    });
    $(document.body).on("click", ".board-edit", function() {
      return void 0;
    });
    $(document.body).on("click", ".board-delete", function() {
      home_board = $(this).attr("data-id");
      $("#delete-board-modal").modal('show');
      return void 0;
    });
    $(document.body).on("click", "#delete-board-no", function() {
      $("#delete-board-modal").modal('hide');
      return void 0;
    });
    $(document.body).on("click", "#delete-board-yes", function() {
      $.ajax({
        type: "POST",
        url: "/api/set/board/delete",
        data: {
          id: home_board
        },
        success: function(data) {
          if (data.code !== 200) {
            console.log("ERROR: " + data.code);
          }
          $("ul.boards li[data-board='" + home_board + "']").remove();
          $("#delete-board-modal").modal("hide");
          return home_board = "";
        },
        error: function(jqXHR, textStatus, err) {
          return console.log(err);
        }
      });
      return void 0;
    });
    $(document.body).on("click", ".category-edit", function() {
      return void 0;
    });
    $(document.body).on("click", ".category-delete", function() {
      del_category = $(this).closest(".panel").attr("data-category");
      $("#delete-category-modal").modal("show");
      return void 0;
    });
    $(document.body).on("click", "#delete-category-yes", function() {
      $.ajax({
        type: "POST",
        url: "/api/set/category/delete",
        data: {
          id: del_category
        },
        success: function(data) {
          if (data.code !== 200) {
            console.log("ERROR: " + data.code);
          }
          $("div.categories div.panel[data-category='" + del_category + "']").remove();
          $("#delete-category-modal").modal("hide");
          return del_category = "";
        },
        error: function(jqXHR, textStatus, err) {
          return console.log(err);
        }
      });
      return void 0;
    });
    $(document.body).on("click", "#delete-category-no", function() {
      $("#delete-category-modal").modal("hide");
      return void 0;
    });
    $(".categories").sortable({
      handle: ".reorder",
      placeholder: "placeholder-category",
      stop: function(e, ui) {
        var c;
        console.log($(".categories").eq(0).attr("data-board-id"));
        return $.ajax({
          type: "POST",
          url: "/api/set/category/order",
          data: {
            id: $(".categories").eq(0).attr("data-board-id"),
            order: JSON.stringify((function() {
              var _i, _len, _ref, _results;
              _ref = $("div.categories").find(".category");
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                c = _ref[_i];
                _results.push($(c).attr("data-category"));
              }
              return _results;
            })())
          },
          success: function(data) {
            if (data.code !== 200) {
              console.log("ERROR: " + data.code);
            }
            return console.log(data);
          },
          error: function(jqXHR, textStatus, err) {
            return console.log(err);
          }
        });
      }
    }).disableSelection();
    return void 0;
  })(jQuery);

}).call(this);
