// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($) {
    var component_stash, createTask, modal, task_list_changed;
    component_stash = {};
    modal = "";
    task_list_changed = [];
    $("a.new-task").on("click", function() {
      $("#new-task-modal-title").val("");
      $("#new-task-modal-desc").val("");
      $("#new-task-modal-duration").val("0");
      $("#new-task-modal-duration-unit").val("0");
      $("#new-task-modal-user").val("0");
      modal = $(this).attr("data-category");
      return void 0;
    });
    $("#new-task-modal-submit").on("click", function() {
      var component, s;
      component = 0;
      if (!("task" in component_stash)) {
        component = 1;
      }
      $.ajax({
        type: "POST",
        url: "/api/set/task/new",
        data: {
          component: component,
          data: {
            title: $("#new-task-modal-title").val(),
            category: modal,
            order: $(".panel[data-category='" + modal + "'] .panel-body .well").length + 1,
            desc: $("#new-task-modal-desc").val(),
            duration: $("#new-task-modal-duration").val(),
            duration_unit: $("#new-task-modal-duration-unit").val(),
            users: JSON.stringify((function() {
              var _i, _len, _ref, _results;
              _ref = $("#new-task-modal-users :selected");
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                s = _ref[_i];
                _results.push($(s).val());
              }
              return _results;
            })())
          }
        },
        success: function(data) {
          console.log(data);
          if (component === 1) {
            component_stash.task = data.data.components;
          }
          createTask(modal, $("#new-task-modal-title").val());
          return $("#new-task-modal").modal("hide");
        },
        error: function(jqXHR, textStatus, err) {
          return console.log(err);
        }
      });
      return void 0;
    });
    $(".task-list").sortable({
      connectWith: $(".task-list"),
      placeholder: "placeholder",
      change: function() {
        var id;
        id = $(this).closest(".panel").attr("data-category");
        if (__indexOf.call(task_list_changed, id) < 0) {
          task_list_changed.push(id);
        }
        return console.log(task_list_changed);
      },
      stop: function(e, ui) {
        var order, t, x, _i, _len;
        order = {};
        for (_i = 0, _len = task_list_changed.length; _i < _len; _i++) {
          x = task_list_changed[_i];
          order[x] = (function() {
            var _j, _len1, _ref, _results;
            _ref = $("div.panel[data-category='" + x + "']").find(".task");
            _results = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              t = _ref[_j];
              _results.push($(t).attr("data-id"));
            }
            return _results;
          })();
        }
        console.log(order);
        return $.ajax({
          type: "POST",
          url: "/api/set/task/order",
          data: {
            order: JSON.stringify(order)
          },
          success: function(data) {
            console.log(data);
            if (data.code !== 200) {
              return console.log("Error: " + data.code);
            }
          },
          error: function(jqXHR, textStatus, err) {
            return console.log(err);
          }
        });
      }
    }).disableSelection();
    createTask = function(category_id, title) {
      $("div.panel[data-category='" + category_id + "'] .panel-body .task-list").append(component_stash.task.replace("{{ title }}", title));
      return null;
    };
    return void 0;
  })(jQuery);

}).call(this);
